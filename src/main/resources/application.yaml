server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s   #데이터가 전송되지 않는 경우 TCP 연결을 끊기 전에 기다리는 시간
  shutdown: graceful


spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  config:
    import: "optional:configserver:" # 외부 config server가 열려있으면 가져오고 없으면, 이것 사용
  cloud:
    config:
      uri: http://localhost:8888 # Config Server's URL
      request-connect-timeout: 5000 # Config Server로의 연결 시도 시간 제한(ms)
      request-read-timeout: 5000 # Config Server로부터 응답을 기다리는 시간 제한(ms)
      fail-fast: false # 초기 시작 시 구성 서버 연결 실패 시 애플리케이션이 실패하도록 설정(true일 경우). 개발 환경에서는 false로 설정.
      retry:
        max-attempts: 6 # 재시도 할 최대 횟수
        initial-interval: 1000 # 첫 재시도 간격(ms)
        max-interval: 2000 # 재시도 간격의 최대 값(ms)
        multiplier: 1.1 # 재시도 간격 증가 배율
    gateway:
      routes: #Route 정의 목록
        - id: catalog-route # Route ID
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates: #predicates가 일치한다면 해당 route로 라우팅
            - Path=/books/** #"/books/" 로 시작하는 모든 요청
          filters:  #CircuitBreaker Filter를 적용할 라우터를 정의
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker #CircuitBreaker 이름
                fallbackUri: forward:/catalog-fallback  #회로가 'open' 상태일 때 요청을 이 URI로 전달, 또는 retry 실패 시에도 적용됨.
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders #URI값은 환경 변수로부터 오거나 해당 환경 변수가 없는 경우 기본값(':'뒤의 값) 사용
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker  #CircuitBreaker에 대한 FallBack을 정의하지 않음.
              args:
                name: orderCircuitBreaker
        - id: spa-route
          uri: ${SPA_URL:http://localhost:9004} #URI 값은 환경 변수로부터 오거나, 그렇지 않으면 ":" 뒤가 기본 값
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico #술어(predicates)는 루트 엔드포인트 그리고 SPA의 정적 리소스와 일치하는 경로들의 목록
      httpclient: #HTTP Client에 대한 설정 속성
        connect-timeout: 2000 #내부의 서비스까지 TCP Connection하는 데 2초 이내
        response-timeout: 5s #내부의 서비스로부터 5초 이내로 응답을 받아야 함
        pool:
          type: elastic #Netty의 HttpClient의 Connection Pool 유형 (elastic, fixed, disabled 중 하나), elastic는 요청 수에 따라 동적으로 Connection Object 증가
          max-idle-time: 15s #15초 동안 아무 데이터도 주고 받지 않는 경우 connection을 닫음
          max-life-time: 60s #모든 connection은 생성된 후 60초 뒤에는 종료
      default-filters:   #기본 필터 목록
        - name: Retry  #필터 이름, 모든 GET 요청에 대하여 재시도 전략 설정
          args:
            retries: 3   #최대 3회의 재시도
            methods: GET  #GET 요청만 재시도
            series: SERVER_ERROR  #5xx 오류에 대해서만 재시도
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException  #지정한 예외가 발생할 때만 재시도
            backoff:  #재시도는 firstBackoff*(factor^n) 공식을 사용해 계산
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false #true이면 공식은 'prevBackoff * factor'
        - name: RequestRateLimiter #RequestRateLimiter 필터는 KeyResolver 빈을 통해 요청에 대해 사용할 버킷을 결정(Spring Security의 현재 인증된 사용자를 버킷으로 사용하도록 기본 설정되어 있음)
          args: #RequestRateLimiter가 타임아웃 제한, 서킷 브레이커, 재시도 같은 다른 패턴보다 제일 먼저 적용됨
            redis-rate-limiter:
              replenishRate: 10 #초당 버킷에 떨어지는 토큰의 수
              burstCapacity: 20 #최대 20개 요청까지 허용
              requestedTokens: 1  #하나의 요청 처리에 몇 개의 토근이 사용되는지 지정
        - SaveSession #Spring Cloud Gateway가 요청을 내부 서비스로 전달하기 전에 항상 웹 세션을 저장하도록 설정
  data:
    redis: #만약 레디스에 문제가 발생한다면, 레디스가 가동될 떄까지 사용률 제한은 일시적으로 비활성화된다.
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
  session:
    store-type: redis #스프링 부트가 세션 관리를 위해 레디스를 사용하도록 설정
    timeout: 10m  #세션에 대한 타임아웃, 기본값은 30분
    redis:
      namespace: polar:edge #edge-service로부터 오는 모든 Session Data 앞에 붙일 고유한 namespace 정의
  security:
    oauth2:
      client:
        registration:
          keycloak: #Spring Security에서 클라이언트 등록을 식별하는 이름 ('registrationId'라고 부름)
            client-id: edge-service #keycloak에서 정의된 OAuth2 클라이언트 식별자
            client-secret: polar-keycloak-secret  #클라이언트가 Keycloak과 인증하기 위해 사용하는 공유 시크릿
            scope: openid #클라이언트가 접근 권한을 갖기를 원하는 영역의 목록. openid 영역은 OAuth2에서 OIDC인증을 수행
        provider:
          keycloak: #몇 줄 위의 'registrationId'와 같은 이름
            issuer-uri: http://localhost:8080/realms/PolarBookshop #특정 영역(realm)에 대한 OAuth2와 OIDC 관련 모든 엔드포인트의 정보를 제공하는 키클록 URL


resilience4j: #CircuitBreaker Filter를 적용할 라우터를 정의했다면, CircuitBreaker 자체를 설정해야한다.
  circuitbreaker:
    configs:
      default: #모든 CircuitBreaker에 대한 기본 설정
        slidingWindowSize: 20 #회로가 'closed' 상태일 때 호출의 결과를 기록하는데 사용하는 Sliding Window의 크기
        permittedNumberOfCallsInHalfOpenState: 5  #회로가 'half-open' 상태일 떄 허용되는 호출의 수
        failureRateThreshold: 50  #실패율이 50% 이상이면 회로는 'open' 상태로 변경
        waitDurationInOpenState: 15000  #'open' -> 'half-open' 으로 상태 변경시 기다리는 시간(15초)
  timelimiter: #시간 제한 설정
    configs:
      default:
        timeoutDuration: 5s #5초 이내로 응답이 오지 않으면 실패로 간주 (위에서 정의한 spring.cloud.gateway.httpclinet.response-timeout보다 높은 우선순위를 가짐)


#logging:
#  level:
#    io.github.resilience4j: DEBUG


